# doing - A command line tool for remembering what you were doing and tracking what you've done.


# Usage

    doing [global options] command [command options] [arguments...]

# Global options

    --[no-]notes        - Output notes if included in the template (default: enabled)
    --version           - Display the program version
    --help              - Show help message and usage summary

# Commands

    help           - Shows a list of commands and global options
    help [command] - Shows help for any command (doing help now)

# Adding Entries

    now      - Add an entry
    later    - Add an item to the Later section
    done     - Add a completed item with @done(date). No argument finishes last entry.
    meanwhile - Finish any @meanwhile tasks and optionally create a new one


# Command Details

## Doing Now

The doing now command can accept -s section_name to send the new entry straight to a non-default section. \

It also accepts --back AMOUNT to let you specify a start date in the past using "natural language." 

Example:
	
	doing now --back 25m ENTRY 

	doing now --back "yesterday 3:30pm" ENTRY

## Doing Finish

You can finish the last unfinished task when starting a new one using doing now with the -f switch. 

It will look for the last task not marked @done and add the @done tag with the start time of the new task (either the current time or what you specified with --back).

Example:
	
	doing finish

doing done is used to add an entry that you've already completed. 

### Finish and Add to Section

You can specify a section with: 

	doing finish -s section_name 

### Finish and Archive

You can also skip straight to Archive with -a:

	doing finish -a


### Doing Done

To finish a task previously entered use done:

	doing done

#### Done with Backdating

doing done can also backdate entries using natural language with:

	--back 15m 

	--back "3/15 3pm"

That will modify the starting timestamp of the entry. 

#### Done with Took

You can also use:

	--took 1h20m

	--took 1:20 

to set the finish date based on a "natural language" time interval. 

If --took is used without --back, then the start date is adjusted (--took interval is subtracted) so that the completion date is the current time.

When used with doing done, --back and --took allow time intervals to be accurately counted when entering items after the fact. 

--took is also available for the doing finish command, but cannot be used in conjunction with --back. 

In finish they both set the end date, and neither has priority. 

	--back 	| 	allows specific days/times

	--took 	| 	uses time intervals


## Edit

All of these commands accept a -e argument. 

	doing -e


This opens your command line editor as defined in the environment variable $EDITOR. 

Add your entry, save the temp file and close it, and the new entry will be added. 

Anything after the first line is included as a note on the entry.


## Doing Meanwhile

doing meanwhile is a special command for creating and finishing tasks that may have other entries come before they're complete. 

Example:

	doing meanwhile "Entry"

When you create an entry with doing meanwhile [entry text], it will automatically complete the last @meanwhile item (dated @done tag) and add the @meanwhile tag to the new item. 

This allows time tracking on a more general basis, and still lets you keep track of the smaller things you do while working on an overarching project. 

The meanwhile command accepts --back [time] and will backdate the @done tag and start date of the new task at the same time. 

Running meanwhile with no arguments will simply complete the last @meanwhile task. 

See doing help meanwhile for more options.


# Modifying Entries

    finish      |	 Mark last X entries as @done
    tag         |	 Tag last entry
    note        |	 Add a note to the last entry



# Displaying entries:

    show      	|	 List all entries
    recent    	|	 List recent entries
    today     	| 	 List entries from today
    yesterday 	|	 List entries from yesterday
    last      	|	 Show the last entry
    grep      	| 	 Show entries matching text or pattern


doing show on its own will list all entries in the "Currently" section. 

Add a section name as an argument to display that section instead. 

Use "all" to display all entries from all sections.

# Export

If you have a use for it, you can use -o csv on the show or view commands to output the results as a comma-separated CSV to STDOUT. 

Redirect to a file to save it: 

	doing show all done -o csv > ~/Desktop/done.csv 

You can do the same with -o json.

doing yesterday is great for stand-ups, thanks to [Sean Collins](https://github.com/sc68cal) for that. 

Note that you can show yesterday's activity from an alternate section by using the section name as an argument (e.g. doing yesterday archive).

doing on allows for full date ranges and filtering. 

doing on saturday, or doing on one month to today will give you ranges. 

You can use the same terms with the show command by adding the -f or --from flag. 

doing show @done --from "monday to friday" will give you all of your completed items for the last week (assuming it's the weekend).


## Views

    view     |	 Display a user-created view
    views    |	 List available custom views

Display any of the custom views you make in ~/.doingrc with the view command. Use doing views to get a list of available views. Any time a section or view is specified on the command line, fuzzy matching will be used to find the closest match. Thus, lat will match Later, etc..


## Sections

    sections 		| 	List sections
    choose 		| 	Select a section to display from a menu
    add_section 		|	Add a new section to the "doing" file


## Utilities

    archive  	| 	 Move entries between sections
    open     	| 	 Open the "doing" file in an editor (OS X)
    config   	| 	 Edit the default configuration


## Archiving

    COMMAND OPTIONS
        -k, --keep=arg 	| 	 Count to keep (ignored if archiving by tag) (default: 5)
        -t, --to=arg   	| 	 Move entries to (default: Archive)
        -b, --bool=arg 	| 	 Tag boolean (default: AND)


The archive command will move entries from one section (default: Currently) to another section (default: Archive). 

doing archive on its own will move all but the most recent 5 entries from currently into the archive.

doing archive other_section will archive from "other_section" to Archive.

doing archive other_section -t alternate will move from "other_section" to "alternate." 

You can use the -k flag on any of these to change the number of items to leave behind. 

To move everything, use -k 0.

You can also use tags to archive. 

You define the section first, and anything following it is treated as tags. 

If your first argument starts with "@", it will assume all sections and assume any following arguments are tags.

By default tag archiving uses an "AND" boolean, meaning all the tags listed must exist on the entry for it to be moved. 

You can change this behavior with -b OR or -b NONE ("ALL" and "ANY" also work). 


Example: Archive all Currently items for @client that are marked @done

    doing archive @client @done


---



# Installation

    $ [sudo] gem install doing

To install the latest version, use --pre:

    $ [sudo] gem install --pre doing


Note: Only use sudo if your environment requires it. If you're using the system Ruby on a Mac, for example, it will likely be necessary. If gem install doing fails, then run sudo gem install doing and provide your administrator password.

1. Run doing config to open your ~/.doingrc file in the editor defined in the $EDITOR environment variable. 

2. Set up your doing_file right away 

3. Set where you want entries to be stored


# The doing file


Default Name:
	"~/what_was_i_doing.md"


Note: The format of the "doing" file is TaskPaper-compatible.

# Notes

Notes are anything in the list without a leading hyphen and date. 

They belong to the entry directly before them, and they should be indented one level beyond the parent item. When using the now and later commands on the command line, you can start the entry with a quote and hit return, then type the note and close the quote. 

Anything after the first line will be turned into a TaskPaper-compatible note for the task and can be displayed in templates using %note.

Notes can be prevented from ever appearing in output with the global option --no-notes: 

	doing --no-notes show all


# Configuration

A basic configuration looks like this:

    ---
    doing_file: /Users/username/Dropbox/nvALT2.2/?? What was I doing.md
    current_section: Currently
    default_template: '%date: %title%note'
    default_date_format: '%Y-%m-%d %H:%M'
    views:
      color:
        date_format: '%F %_I:%M%P'
        section: Currently
        count: 10
        wrap_width: 0
        template: '%boldblack%date %boldgreen| %boldwhite%title%default%note'
        order: desc
    templates:
      default:
        date_format: '%Y-%m-%d %H:%M'
        template: '%date | %title%note'
        wrap_width: 0
      today:
        date_format: '%_I:%M%P'
        template: '%date: %title%odnote'
        wrap_width: 0
      last:
        date_format: '%_I:%M%P on %a'
        template: '%title (at %date)%odnote'
        wrap_width: 0
      recent:
        date_format: '%_I:%M%P'
        template: '%date > %title%odnote'
        wrap_width: 50
    :include_notes: true


The config file is stored in "~/.doingrc", and is created on the first run.

# Per-folder configuration

Any options found in a .doingrc anywhere in the hierarchy between your current folder and your home folder will be appended to the base configuration, overriding or extending existing options. 

This allows you to put a .doingrc file into the base of a project and add specific configurations (such as default tags) when working in that project on the command line.

Any part of the configuration can be copied into these local files and modified. You only need to include the parts you want to change or add.

## Doing file location

The one thing you'll probably want to adjust is the file that the notes are stored in. 

That's the doing_file key:

    doing_file: /Path/to/file/what_was_i_doing.md


# "Current actions" section

You can rename the section that holds your current tasks. 
By default, this is "Currently," but if you have some other bright idea, feel free:

    current_section: Currently

# Default editors

The setting editor_app only applies to Mac OS X users. It's the default application that the command doing open will open your WWID file in. 

If this is blank, it will be opened by whatever the system default is, or you can use -a app_name or -b bundle_id to override.

In the case of the doing now -e command, your $EDITOR environment variable will be used to complete the entry text and notes. 
Set it in your ~/.bash_profile or whatever is appropriate for your system:

    export EDITOR="mate -w"

The only requirements are that your editor be launchable from the command line and able to "wait." 

In the case of Sublime Text and TextMate, just use -w like this: export EDITOR="subl -w".

# Templates

The config also contains templates for various command outputs. 
Include placeholders by placing a % before the keyword. 
The available tokens are:

- %title: the "what was I doing" entry line
- %date: the date based on the template's "date_format" setting
- %shortdate: a custom date formatter that removes the day/month/year from the entry if they match the current day/month/year
- %note: Any note in the entry will be included here, a newline and tabs are automatically added.
- %odnote: The notes with a leading tab removed (outdented note)
- %chompnote: Notes on one line, beginning and trailing whitespace removed.
- %section: The section/project the entry is currently in
- %hr: a horizontal rule (-) the width of the terminal
- %hr_under: a horizontal rule (_) the width of the terminal
- %n: inserts a newline
- %t: inserts a tab
- %[color]: color can be black, red, green, blue, yellow, magenta, cyan or white
    - you can prefix "bg" to affect background colors (%bgyellow)
    - prefix "bold" and "boldbg" for strong colors (%boldgreen, %boldbgblue)
    - there are some random special combo colors. Use doing colors to see the list
- %interval: when used with the -t switch on the show command, it will display the time between a timestamp or @start(date) tag and the @done(date) tag, if it exists. Otherwise, it will remain empty.

# Date Format

Date formats are based on Ruby [strftime](http://www.ruby-doc.org/stdlib-2.1.1/libdoc/date/rdoc/Date.html#method-i-strftime) formatting.


# Custom Views

You can create your own "views" in the ~/.doingrc file and view them with doing view view_name. 

Just add a section like this:

    views:
      old:
        section: Old
        count: 5
        wrap_width: 0
        date_format: '%F %_I:%M%P'
        template: '%date | %title%note'
        order: asc
        tags: done finished cancelled
        tags_bool: ANY

You can add additional custom views, just nest them under the "views" key (indented two spaces from the edge). 

Multiple views would look like this:

    views:
      later:
        section: Later
        count: 5
        wrap_width: 60
        date_format: '%F %_I:%M%P'
        template: '%date | %title%note'
      old:
        section: Old
        count: 5
        wrap_width: 0
        date_format: '%F %_I:%M%P'
        template: '%date | %title%note' 


You can also specify a default output format for a view. 

Most of the optional output formats override the template specification (html, csv, json). 

If the view command is used with the -o flag, it will override what's specified in the file.



# Section

The "section" key is the default section to pull entries from. 

Count and section can be overridden at runtime with the -c and -s flags. Setting section to All will combine all sections in the output.

You can add new sections with 

	doing add_section section_name

	doing now -s section_name


# Tags

The tags and tags_bool keys allow you to specify tags that the view is filtered by. 

You can list multiple tags separated by spaces, and then use tags_bool to specify "ALL," "ANY," or "NONE" to determine how it handles the multiple tags.

# Order

The order key defines the sort order of the output. 

This is applied after the tasks are retrieved and cut off at the maximum number specified in count.

# Colors

Regarding colors, you can use them to create very nice displays if you're outputting to a color terminal. 

Example:

    color:
      date_format: '%F %_I:%M%P'
      section: Currently
      count: 10
      wrap_width: 0
      template: '%boldblack%date %boldgreen| %boldwhite%title%default%note'



***


# Help - Finishing

doing finish by itself is the same as doing done by itself. It adds @done(timestamp) to the last entry. It also accepts a numeric argument to complete X number of tasks back in history. Add -a to also archive the affected entries.

doing finish also provides an --auto flag, which you can use to set the end time of any entry to 1 minute before the start time of the next. 

Running a command such as doing finish --auto 10 will go through the last 10 entries and sequentially update any without a @done tag with one set to the time just before the next entry in the list.

As mentioned above, finish also accepts --back "2 hours" (sets the finish date from time now minus interval) or --took 30m (sets the finish date to time started plus interval) so you can accurately add times to completed tasks, even if you don't do it in the moment.


# Help - Tagging and Autotagging

tag adds one or more tags to the last entry, or specify a count with -c X. 

Tags are specified as basic arguments, separated by spaces. For example:

    doing tag -c 3 client cancelled

... will mark the last three entries as "@client @cancelled." 

Add -r as a switch to remove the listed tags instead.

You can optionally define keywords for common tasks and projects in your .doingrc file. 

When these keywords appear in an item title, they'll automatically be converted into @tags. 

The "whitelist" tags are exact (but case insensitive) matches. 

You can also define "synonyms" which will add a tag at the end based on keywords associated with it. 

When defining synonym keys, be sure to indent but _not_ hyphenate the keys themselves, while hyphenating the list of synonyms at the same indent level as their key. See "playing" and "writing" in the list below for illustration. 

Follow standard yaml syntax.

To add autotagging, include a section like this in your ~/.doingrc file:

    autotag:
      whitelist:
      - doing
      - mindmeister
      - marked
      - playing
      - working
      - writing
      synonyms:
        playing:
        - hacking
        - tweaking
        - toying
        - messing
        writing:
        - blogging
        - posting
        - publishing


# Annotating

note lets you append a note to the last entry. 

You can specify a section to grab the last entry from with -s section_name. 

-e will open your $EDITOR for typing the note, but you can also just include it on the command line after any flags. 

You can also pipe a note in on STDIN (echo "fun stuff"|doing note). 

If you don't use the -r switch, new notes will be appended to the existing notes, and using the -e switch will let you edit and add to an existing note. 

The -r switch will remove/replace a note; if there's new note text passed when using the -r switch, it will replace any existing note. 

If the -r switch is used alone, any existing note will be removed.

You can also add notes at the time of entry by using the -n or --note flag with doing now, doing later, or doing done. 

If you pass text to any of the creation commands which has multiple lines, everything after the first line break will become the note.




---

# Extras

## Bash completion

See the file doing.completion.bash in the git repository for full bash completion. 

Thanks to [fcrespo82](https://github.com/fcrespo82) for getting it [started](https://gist.github.com/fcrespo82/9609318).



# Troubleshooting


## Errors after "Successfully installed..."

If you get errors in the terminal immediately after a message like:

    Successfully installed doing-x.x.x
    2 gems installed

...it may just be documentation related. If running doing works, you can ignore them. If not, try running the install command again with --no-document:

    $ gem install --no-document doing


## Command not found

If running doing after a successful install gives you a "command not found" error, then your gem path isn't in your $PATH, meaning the system can't find it. To locate the gem and link it into your path, you can try this:

    cd $GEM_PATH/bin
    ln -s doing /usr/local/bin/

Then try running doing and see if it works.



## Encoding errors

Ruby is rife with encoding inconsistencies across platforms and versions. Feel free to file issues (see below).


