Disable Folding

Add the following line to your .vimrc to disable the folding configuration:

let g:vim_markdown_folding_disabled = 1
This option only controls Vim Markdown specific folding configuration.

To enable/disable folding use Vim's standard folding configuration.

set [no]foldenable
Change fold style

To fold in a style like python-mode, add the following to your .vimrc:

let g:vim_markdown_folding_style_pythonic = 1
Level 1 heading which is served as a document title is not folded. g:vim_markdown_folding_level setting is not active with this fold style.

To prevent foldtext from being set add the following to your .vimrc:

let g:vim_markdown_override_foldtext = 0
Set header folding level

Folding level is a number between 1 and 6. By default, if not specified, it is set to 1.

let g:vim_markdown_folding_level = 6
Tip: it can be changed on the fly with:

:let g:vim_markdown_folding_level = 1
:edit
Disable Default Key Mappings

Add the following line to your .vimrc to disable default key mappings:

let g:vim_markdown_no_default_key_mappings = 1
You can also map them by yourself with <Plug> mappings.

Enable TOC window auto-fit

Allow for the TOC window to auto-fit when it's possible for it to shrink. It never increases its default size (half screen), it only shrinks.

let g:vim_markdown_toc_autofit = 1
Text emphasis restriction to single-lines

By default text emphasis works across multiple lines until a closing token is found. However, it's possible to restrict text emphasis to a single line (ie, for it to be applied a closing token must be found on the same line). To do so:

let g:vim_markdown_emphasis_multiline = 0
Syntax Concealing

Concealing is set for some syntax.

For example, conceal [link text](link url) as just link text. Also, _italic_ and *italic* will conceal to just italic. Similarly __bold__, **bold**, ___italic bold___, and ***italic bold*** will conceal to just bold, bold, italic bold, and italic bold respectively.

To enable conceal use Vim's standard conceal configuration.

set conceallevel=2
To disable conceal regardless of conceallevel setting, add the following to your .vimrc:

let g:vim_markdown_conceal = 0
To disable math conceal with LaTeX math syntax enabled, add the following to your .vimrc:

let g:tex_conceal = ""
let g:vim_markdown_math = 1
Fenced code block languages

You can use filetype name as fenced code block languages for syntax highlighting. If you want to use different name from filetype, you can add it in your .vimrc like so:

let g:vim_markdown_fenced_languages = ['csharp=cs']
This will cause the following to be highlighted using the cs filetype syntax.

```csharp
...
```
Default is ['c++=cpp', 'viml=vim', 'bash=sh', 'ini=dosini'].

Follow named anchors

This feature allows ge to follow named anchors in links of the form file#anchor or just #anchor, where file may omit the .md extension as usual. Two variables control its operation:

let g:vim_markdown_follow_anchor = 1
This tells vim-markdown whether to attempt to follow a named anchor in a link or not. When it is 1, and only if a link can be split in two parts by the pattern '#', then the first part is interpreted as the file and the second one as the named anchor. This also includes urls of the form #anchor, for which the first part is considered empty, meaning that the target file is the current one. After the file is opened, the anchor will be searched.

Default is 0.

let g:vim_markdown_anchorexpr = "'<<'.v:anchor.'>>'"
This expression will be evaluated substituting v:anchor with a quoted string that contains the anchor to visit. The result of the evaluation will become the real anchor to search in the target file. This is useful in order to convert anchors of the form, say, my-section-title to searches of the form My Section Title or <<my-section-title>>.

Default is ''.

Syntax extensions

The following options control which syntax extensions will be turned on. They are off by default.

LaTeX math

Used as $x^2$, $$x^2$$, escapable as \$x\$ and \$\$x\$\$.

let g:vim_markdown_math = 1
YAML Front Matter

Highlight YAML front matter as used by Jekyll or Hugo.

let g:vim_markdown_frontmatter = 1
TOML Front Matter

Highlight TOML front matter as used by Hugo.

TOML syntax highlight requires vim-toml.

let g:vim_markdown_toml_frontmatter = 1
JSON Front Matter

Highlight JSON front matter as used by Hugo.

JSON syntax highlight requires vim-json.

let g:vim_markdown_json_frontmatter = 1
Adjust new list item indent

You can adjust a new list indent. For example, you insert a single line like below:

* item1
Then if you type o to insert new line in vim and type * item2, the result will be:

* item1
    * item2
vim-markdown automatically insert the indent. By default, the number of spaces of indent is 4. If you'd like to change the number as 2, just write:

let g:vim_markdown_new_list_item_indent = 2
Do not require .md extensions for Markdown links

If you want to have a link like this [link text](link-url) and follow it for editing in vim using the ge command, but have it open the file "link-url.md" instead of the file "link-url", then use this option:

let g:vim_markdown_no_extensions_in_markdown = 1
This is super useful for GitLab and GitHub wiki repositories.

Normal behaviour would be that vim-markup required you to do this [link text](link-url.md), but this is not how the Gitlab and GitHub wiki repositories work. So this option adds some consistency between the two.

Auto-write when following link

If you follow a link like this [link text](link-url) using the ge shortcut, this option will automatically save any edits you made before moving you:

let g:vim_markdown_autowrite = 1
Mappings

The following work on normal and visual modes:

gx: open the link under the cursor in the same browser as the standard gx command. <Plug>Markdown_OpenUrlUnderCursor

The standard gx is extended by allowing you to put your cursor anywhere inside a link.

For example, all the following cursor positions will work:

[Example](http://example.com)
^  ^    ^^   ^       ^
1  2    34   5       6

<http://example.com>
^  ^               ^
1  2               3
Known limitation: does not work for links that span multiple lines.

ge: open the link under the cursor in Vim for editing. Useful for relative markdown links. <Plug>Markdown_EditUrlUnderCursor

The rules for the cursor position are the same as the gx command.

]]: go to next header. <Plug>Markdown_MoveToNextHeader

[[: go to previous header. Contrast with ]c. <Plug>Markdown_MoveToPreviousHeader

][: go to next sibling header if any. <Plug>Markdown_MoveToNextSiblingHeader

[]: go to previous sibling header if any. <Plug>Markdown_MoveToPreviousSiblingHeader

]c: go to Current header. <Plug>Markdown_MoveToCurHeader

]u: go to parent header (Up). <Plug>Markdown_MoveToParentHeader

This plugin follows the recommended Vim plugin mapping interface, so to change the map ]u to asdf, add to your .vimrc:

map asdf <Plug>Markdown_MoveToParentHeader
To disable a map use:

map <Plug> <Plug>Markdown_MoveToParentHeader
Commands

The following requires :filetype plugin on.

:HeaderDecrease:

Decrease level of all headers in buffer: h2 to h1, h3 to h2, etc.

If range is given, only operate in the range.

If an h1 would be decreased, abort.

For simplicity of implementation, Setex headers are converted to Atx.

:HeaderIncrease: Analogous to :HeaderDecrease, but increase levels instead.

:SetexToAtx:

Convert all Setex style headers in buffer to Atx.

If a range is given, e.g. hit : from visual mode, only operate on the range.

:TableFormat: Format the table under the cursor like this.

Requires Tabular.

The input table must already have a separator line as the second line of the table. That line only needs to contain the correct pipes |, nothing else is required.

:Toc: create a quickfix vertical window navigable table of contents with the headers.

Hit <Enter> on a line to jump to the corresponding line of the markdown file.

:Toch: Same as :Toc but in an horizontal window.

:Toct: Same as :Toc but in a new tab.

:Tocv: Same as :Toc for symmetry with :Toch and :Tocv.
