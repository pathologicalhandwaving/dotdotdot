#+TITLE: Literate Emacs Config
#+AUTHOR: PathologicalHandwaving
#+PROPERTY: header-args :tangle yes

line3 :: Automatically tangle (include) all code blocks in this file when generating the code for the config


* Config
:PROPERTIES:
:VISIBILITY: children
:END:


** Table of Contents :TOC_3_gh:


** Basic User Info

#+BEGIN_SRC emacs-lisp
(setq user-full-name "PathologicalHandwaving"
      user-mail-address "pathologicalhandwaving@icloud.com")
#+END_SRC


** Initialize Config

*** Settings

**** gc-cons-threshold

Increasing gc-cons-threshold to a ridiculously high number during initialization.
Threshold increase will decrease load and compile time.
After initialization has completed we want to lower the threshold to avoid long GC pauses during use.

#+BEGIN_SRC emacs-lisp
(eval-and-compile
  (setq gc-cons-threshold 402653184
        gc-cons-percentage 0.6))
#+END_SRC


**** Disable some byte compiler warnings to reduce noise

Change this if you want to see some or all byte compiler warnings

#+BEGIN_SRC emacs-lisp
(setq bytes-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
#+END_SRC



** Package Management


*** Package Initialization

Set =load-path= explicitly
and avoid calling =(package-initialize)= for performance
We need to set =package--init-file-ensured t=
so that =package.el= will not automatically call it for us

Also we set =package-enable-at-startup nil=
since =use-package= is handling that

#+BEGIN_SRC emacs-lisp
(eval-and-compile
  (setq load-prefer-newer t
        package-user-dir "~/.emacs.d/elpa"
        package--init-file-ensured t
        package-enabled-at-startup nil)
  (unless (file-directory-p package-user-dir)
    (make-directory package-user-dir t)))
#+END_SRC


*** Use Package Settings

Tell =use-package= to always defer loading of packages
unless explicitly told otherwise

The effect of this setting speeds up initialization since many packages will only be loaded on a per use basis


#+BEGIN_SRC emacs-lisp
(setq use-package-always-defer t
      use-package-verbose t)
#+END_SRC


*** Manually Set Load Path

Dodge large performance hit by setting the =load-path= manually
so we dont have to call =package-initialize= at runtime

This =load-path= will be faster than =package-initialize=
since it appends the elpa packages to the end of the load path
Avoiding the case where anytime a builtin package is called
all third party paths are searched first

#+BEGIN_SRC emacs-lisp
(eval-and-compile
  (setq load-path (append load-path (directory-files package-user-dir t "^[^.]" t))))
#+END_SRC


*** Initialize Package Management

Require =package.el= and add additional package archives 'melpa' and 'org'
Then initialize packages
ensure =use-package= is installed
if missing install it
load =use-package= and tell it to always install missing packages

We wrap the whole block in =eval-when-compile=
This ensures all package initialization is performed during compilation
so byte compilation doesnt take as long
We can do this because results of byte compiling =use-package= statements cause the macro to be fully-expanded
this expansion means =use-package= is not required any more


#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (require 'package)

  (unless (assoc-default "melpa" package-archives)
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t))
  (unless (assoc-default "org" package-archives)
    (add-to-list 'package-archives '("org" . "http://tromey.com/elpa/") t))

  (package-initialize)
  (unless (package-installed-p 'use-package)
    (package-refresh-content)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t))
#+END_SRC



** Load Base Packages



*** Ivy
Completion frontend

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :demand t)
#+END_SRC


*** Counsel
Use ivy better

#+BEGIN_SRC emacs-lisp
(use-package counsel-projectile)
(use-package counsel
  :demand t)
#+END_SRC


*** Swiper
Search util with preview

#+BEGIN_SRC emacs-lisp
(use-package swiper
  :commands (swiper swiper-all))
#+END_SRC


*** Magit
Git client
Load when called

#+BEGIN_SRC emacs-lisp
(use-package magit
  :commands (magit-status magit-blame magit-log-buffer-file magit-log-all))
#+END_SRC


*** Projectile
Project manager

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :demand t)
#+END_SRC


*** OrgMode
Its fucking orgmore
We want the newer org so we load =org-plus-contrib=
Manually remove org dirs from load path
ensuring the version we want gets priority

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :pin org
  :defer t)

(require 'cl)
(setq load-path (remove-if (lambda (x) (string-match-p "org$" x)) load-path))
#+END_SRC


**** TOC-org
Load =TOC-org= after org mode is loaded
This autoupdates the toc

#+BEGIN_SRC emacs-lisp
(use-package toc-org
  :after org
  :init (add-hook 'org-mode-hook #'toc-org-enable))
#+END_SRC


*** Custom Config Load
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file 'noerror)
(org-babel-load-file "~/.emacs.d/custom.org")
#+END_SRC


** Post Initialization

Lower GC thresholds to sane leve

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 16777216
      gc-cons-percentage 0.1)
#+END_SRC
