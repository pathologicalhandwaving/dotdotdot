;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(coding-system-history command-history ialign--history org-capture--prompt-history org-refile-history ido-file-history org-tags-history swiper-history org--links-history org-read-date-history file-name-history minibuffer-history helm-M-x-input-history))
(setq coding-system-history '("raw-text" "utf-8" "utf-8-mac" "utf-8-mac"))
(setq command-history '((org-bullets-mode 'toggle) (helm-M-x nil "org-bullets-mode") (org-bullets-mode 'toggle) (helm-M-x nil "org-bullets-mode") (load-theme 'org-beautify nil nil) (helm-M-x nil "load-theme") (package-install 'ipretty nil) (helm-M-x nil "package-install") (package-install 'pretty-mode nil) (helm-M-x nil "package-install") (package-install 'deft nil) (helm-M-x nil "package-install") (package-install 'define-word nil) (helm-M-x nil "package-install") (tablist-export-csv nil t nil nil t) (helm-M-x nil #("tablist-export-csv" 0 18 (match-part "tablist-export-csv"))) (package-install 'ox-trac nil) (helm-M-x nil "package-install") (package-install 'helm-sheet nil) (helm-M-x nil "package-install") (package-install 'cheatsheet nil) (helm-M-x nil "package-install") (package-install 'timesheet nil) (helm-M-x nil "package-install") (package-refresh-contents) (helm-M-x nil "package-refresh-contents") (package-install 'timesheet nil) (helm-M-x nil "package-install") (package-install 'timerfunctions nil) (helm-M-x nil "package-install") (package-install 'org-clock-csv nil) (helm-M-x nil "package-install") (package-install 'org-clock-convenience nil) (helm-M-x nil "package-install") (package-install 'counsel-world-clock nil) (helm-M-x nil "package-install") (package-install 'highlight-blocks nil) (helm-M-x nil "package-install") (package-install 'shell-history nil) (helm-M-x nil "package-install") (package-install 'helm-google nil) (helm-M-x nil "package-install") (package-install 'org-gcal nil) (helm-M-x nil "package-install") (package-install 'gmail-message-mode nil) (helm-M-x nil "package-install") (package-install 'gmail2bbdb nil) (helm-M-x nil "package-install") (package-install 'org-cliplink nil) (helm-M-x nil "package-install") (package-install 'helm-bibtexkey nil) (helm-M-x nil "package-install") (org-brain-add-parent) (helm-M-x nil #("org-brain-add-parent" 0 20 (match-part "org-brain-add-parent"))) (org-brain-visualize-mind-map) (helm-M-x nil "org-brain-visualize-mind-map") (org-brain-add-child) (helm-M-x nil "org-brain-add-child") (org-brain-remove-child) (helm-M-x nil "org-brain-remove-child") (org-brain-remove-child) (helm-M-x nil "org-brain-remove-child") (org-brain-visualize-mind-map) (helm-M-x nil "org-brain-visualize-mind-map") (org-brain-visualize-mind-map) (helm-M-x nil "org-brain-visualize-mind-map") (org-brain-visualize "ImInSpace") (helm-M-x nil "org-brain-visualize") (org-brain-add-child) (helm-M-x nil "org-brain-add-child") (org-brain-add-child) (helm-M-x nil "org-brain-add-child") (org-brain-visualize "ImInSpace") (helm-M-x nil "org-brain-visualize") (org-brain-remove-child) (helm-M-x nil "org-brain-remove-child") (org-brain-remove-parent) (helm-M-x nil #("org-brain-remove-parent" 0 23 (match-part "org-brain-remove-parent"))) (org-brain-visualize-mind-map) (helm-M-x nil "org-brain-visualize-mind-map") (org-brain-remove-child) (helm-M-x nil "org-brain-remove-child") (org-brain-visualize-mind-map) (helm-M-x nil "org-brain-visualize-mind-map") (org-brain-visualize-mind-map) (helm-M-x nil "org-brain-visualize-mind-map") (org-brain-remove-child) (helm-M-x nil "org-brain-remove-child") (org-brain-remove-child) (helm-M-x nil "org-brain-remove-child") (org-brain-switch-brain "/Users/Em/Repos/ImInSpace/brain/") (helm-M-x nil "org-brain-switch-brain") (org-brain-visualize-mind-map) (helm-M-x nil "org-brain-visualize-mind-map") (org-brain-visualize-mode) (helm-M-x nil "org-brain-visualize-mode") (org-brain-add-child) (helm-M-x nil "org-brain-add-child") (org-brain-add-child) (helm-M-x nil "org-brain-add-child") (org-brain-add-child)))
(setq org-capture--prompt-history '("English 4 Essay"))
(setq ido-file-history '("jthompson.tex" "intro-literate-programming.org" "jthompson-dash.org" "default.bib"))
(setq org-tags-history '("APPOINTMENT" "FOLLOWUP" ":FOLLOWUP:" "FOLLOWUP"))
(setq swiper-history '(#(" **** Essay" 0 1 (swiper-line-number "202 " display "202 ") 1 4 (fontified t face org-hide mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 4 6 (fontified t face org-level-4 mouse-face highlight keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse))) 6 11 (fontified t face org-level-4))))
(setq org--links-history '("eshell:"))
(setq org-read-date-history '("   " "2018-04-13    " "11:30    " "   "))
(setq file-name-history '(#("/Users/Em/Repos/ImInSpace/Brains/brain.org" 0 42 (ivy-index 2)) #("/Users/Em/Repos/ImInSpace/Notes/" 0 32 (ivy-index 16)) "~/.emacs.d/personal/settings.el" #("/Users/Em/Desktop/jthompson.tex" 10 17 (face flx-highlight-face)) #("/Users/Em/Repos/Tutoring/Students/JThompson/Eng4/" 0 49 (ivy-index 3)) #("/Users/Em/Repos/Tutoring/Students/JThompson/" 0 44 (ivy-index 0)) #("/Users/Em/.emacs.d/" 0 19 (ivy-index 0)) #("/Users/Em/.emacs.d/core/" 0 24 (ivy-index 4)) #("/Users/Em/.emacs.d/themes/" 0 26 (ivy-index 12)) #("/Users/Em/Downloads/init-org.org" 0 32 (ivy-index 8)) #("/Users/Em/Documents/" 0 20 (ivy-index 0)) "~/.emacs.d/snippets/org-mode/sleepcycle" #("/Users/" 0 7 (ivy-index 5)) "/Users/Em/Repos/ImInSpace/Notes/intro-literate-programming.org" #("/Users/Em/Repos/ImInSpace/Notes/elisp-mathfunctions.org" 0 55 (ivy-index 3)) #("/Users/Em/Repos/Tutoring/Students/JThompson/jthompson-dash.org" 10 15 (face flx-highlight-face) 16 24 (face flx-highlight-face) 25 27 (face flx-highlight-face) 34 43 (face flx-highlight-face)) #("/Users/Em/Repos/Tutoring/Jeremie/April/paper-imagecredit.org" 0 60 (ivy-index 0)) #("/Users/Em/Repos/Tutoring/Jeremie/" 0 33 (ivy-index 5)) #("/Users/Em/" 0 10 (ivy-index 2)) "~/Repos/Tutoring/Jeremie/April/outline.org" #("/Users/Em/Repos/Tutoring/Jeremie/April/jthompson-dash.org" 0 57 (ivy-index 0)) #("/Users/Em/Repos/ImInSpace/CaptainsLog/Health/tracking.org" 0 57 (ivy-index 0)) "/Users/Em/Repos/ImInSpace/Library/Refs/default.bib" #("/Users/Em/Repos/Tutoring/Jeremie/April/" 0 39 (ivy-index 2)) #("/Users/Em/Repos/Tutoring/Jeremie/Error/" 0 39 (ivy-index 3)) #("/Users/Em/Repos/ImInSpace/CaptainsLog/Health/" 0 45 (ivy-index 2)) "~/Repos/ImInSpace/Library/Refs/readlater.org" "~/Repos/ImInSpace/Library/Refs/default.bib" "~/Repos/ImInSpace/Library/Dictionary/glossary.org" "~/Repos/ImInSpace/Library/Dictionary/emacs-glossary.org" "~/Repos/ImInSpace/Library/Dictionary/dictionary.org" "~/Repos/ImInSpace/Library/Dictionary/anti-glossary.org" "~/Repos/ImInSpace/Library/Dictionary/acronyms.org" "~/Repos/ImInSpace/CaptainsLog/logs.org" "~/Repos/ImInSpace/CaptainsLog/appointments.org" "~/Repos/ImInSpace/CaptainsLog/agenda.org" "~/Repos/ImInSpace/CaptainsLog/todos.org" #("/Users/Em/Repos/ImInSpace/CaptainsLog/agenda.org" 0 48 (ivy-index 5)) #("/Users/Em/Repos/ImInSpace/CaptainsLog/" 0 38 (ivy-index 4)) #("/Users/Em/Repos/ImInSpace/CaptainsLog/captainslog.org" 0 53 (ivy-index 7)) "~/Repos/ImInSpace/CaptainsLog/inbox.ics" #("/Users/Em/Repos/ImInSpace/" 0 26 (ivy-index 0)) "~/.emacs.d/personal/custom.el"))
(setq minibuffer-history '("or" "pret" "def" "trac" "sheet" "time" "cloc" "clock" "bloc" "tor" "goo" "gca" "gma" "db" "org" "helm-" "Repos" "" "Dropbox" "" "Dropbox" "External SubModules" "ImInSpace" "" "/Users/Em/Repos/ImInSpace/brain/" "Tor" "Alfred" "Keyboard Maestro" "Modules" "" "System Designer" "" "Applications" "" "Emacs::orgmode" "" "Emacs::elisp" "" "orgmode" "elisp" "" "Emacs" "ob-sh" "use-p" "/Users/Em/.emacs.d/personal/" "sh" "org" "angr" "" "osx" "sx" "org" "JThompson Dashboard" "" "/Users/Em/Documents/Dropbox/ToGo/q" "previ" "org-" "org-b" "ToGo" "" "mpv" "emms" "emm" "/Users/Em/.emacs.d/snippets/org-mode/slee" "/Users/Em/Repos/ImInSpace/C" "mobile" "mode" "htmli" "http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html" "ob-sh" "ob-" "ob-r" "/Users/Em/Repos/ImInSpace/" "" "find" "ap" "app" "pro" "cap" " cap" "dia" "tag" "hi" "ex" " ex" "direc" "load" "link" "toc" "otam" "imap" "wr" "csv" "tbl" "xk" "wot" "list" "mini" "gnu" "edit"))
(setq helm-M-x-input-history '(#("pdf-view-mode-map" 0 17 (fontified t)) "org-bu" "load-theme" "csv" "package-r" #("works" 0 5 (fontified t face font-lock-comment-face)) "pack" "org-brain-add-parent" #("External" 0 8 (button (t) category default-button action #[257 "\301\300!\207" ["External SubModules" org-brain-visualize] 3 "\n\n(fn X)"] follow-link t help-echo nil)) "ImInSpace" #("ImInSpace-+-Dropbox" 0 9 (button (t) category default-button action #[257 "\301\300!\207" ["ImInSpace" org-brain-visualize] 3 "\n\n(fn X)"] follow-link t help-echo nil) 12 19 (button (t) category default-button action #[257 "\301\300!\207" ["Dropbox" org-brain-visualize] 3 "\n\n(fn X)"] follow-link t help-echo nil)) "ImInSpace" #("External" 0 8 (button (t) category default-button action #[257 "\301\300!\207" ["External SubModules" org-brain-visualize] 3 "\n\n(fn X)"] follow-link t help-echo nil)) "ImInSpace" "org-brain-vi" #("OrgMode-+-Tor" 0 7 (button (t) category default-button action #[257 "\301\300!\207" [("Emacs" "OrgMode" "1B1CEE07-C6D4-42A0-8F77-6F793EF818EC") org-brain-visualize] 3 "\n\n(fn X)"] follow-link t help-echo nil) 10 13 (button (t) category default-button action #[257 "\301\300!\207" ["Tor" org-brain-visualize] 3 "\n\n(fn X)"] follow-link t help-echo nil)) "org-brain-re" "OrgMode" "Applications" #("Modules" 0 7 (button (t) category default-button action #[257 "\301\300!\207" ["Modules" org-brain-visualize] 3 "\n\n(fn X)"] follow-link t help-echo nil)) #("1B1CEE07-C6D4-42A0-8F77-6F793EF818EC" 0 36 (fontified t org-category "Applications" font-lock-fontified t face org-meta-line)) "org-brain-" #("+-Alfred" 2 8 (button (t) category default-button action #[257 "\301\300!\207" ["Alfred" org-brain-visualize] 3 "\n\n(fn X)"] follow-link t help-echo nil)) "OrgMode" "orgmode" "org-brain-add-child" "org-brain-add-c" "org-brain-a" "org-brain-visual" "org-brain-visu" "org-brain" "load-" #("*" 0 1 (fontified t org-category "Emacs" composition (0 1 [9819]) keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) face org-level-1 mouse-face highlight)) "Emacs" "org-brain" "org-bul" "org-brain-open" "org-brain-goto" "Emacs" "org-brain-new" "org-brain-vi" "org-brain-" "org-brain" "org-brain-add" "find-file" "org-bra" "find-file" "load-li" "org-br" "org-bul" "find-file" "package-install" "packa" "prelude-" "package-install" "load-theme" "org-export-as-org" "org-latex-export-as-latex" #("References" 0 10 (face org-level-2 fontified t)) #("regardless" 0 10 (fontified t)) "pdf" #("**" 0 1 (keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-hide fontified t) 1 2 (keymap (keymap (C-down-mouse-1 . org-mouse-move-tree-start) (C-drag-mouse-1 . org-mouse-move-tree) (follow-link . mouse-face) (mouse-3) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-level-2 fontified t)) "package" "org-jou" "org-j" "org-jou" "org-bu" "find-file" "org-ca" "load-theme" #("installer" 0 9 (fontified t help-echo "mouse-2: visit this file in other window" mouse-face highlight dired-filename t)) #("el" 0 2 (fontified t help-echo "mouse-2: visit this file in other window" mouse-face highlight dired-filename t)) "find-fil" "org-pr" "html" "find-f" "Apply" "package" "org-bu" #("services" 0 8 (face org-level-1 fontified t)) "mob" "find-f" "load-th" "package-in" "find-fil" "org-mobile-push" "org-mobi" "org-mob" "python" "pack" "org-babel-" "org-babel-ex" "fin" "whit" "org-b" "find-fi" "org-bu" "find-file" "load" "list-d"))
(setq tablist-named-filter 'nil)
(setq search-ring 'nil)
(setq regexp-search-ring 'nil)
